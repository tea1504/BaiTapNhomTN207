<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAYAAADDPmHLAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAD
        dgAAA3YBfdWCzAAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAA8HSURBVHhe7d1r
        cFXVGYBhlYtcgojSCjWioAJGVETDXQhBxNpSbMcLjk61VvunVjrMINTehl5mwOpMp9JxcCgdHOg4FbES
        bgGUiCAGkSCiGNR4I4AUQiRAtJBv9d0nxIT4KWufc7L22rB/vP74xr3IYT0hJ+eyzmnGmJO6Aa9I7oB1
        MuGadTLp2rXyaP5amZ//sqweuEbKB62RmkEvSc3gEikfUiKrh66W+fTosBdl0vAXZALlamueTKnDuNf/
        Vcnrv14evnq9bACAAMAAwADAAMAAwADAAMAAwADAAMCw+akAYNj8ILlulWygh0eskjztz4p76jCOXbFB
        8q4slRlXlcp2ABgAGAAYAJgMABg2PxUAzIiVsn3kSpkxcsXJg0Edxql+r0kumz+H6gBgAGBaEIABgAFA
        Hc0pKI7/jwh1GIfyNkqXyzfKDADUsvkmyCGAVACopRmjiqWL9jXGIXXoc5dtkjZ5r8tkAFQBwAAgtfkR
        AUgFgKpRy2Vy4XJpo33NPqcOfa3vJukKgBIAGAAYjwAYABgAlBQuk67a1+5r6tDH+pZJPwBUAMB4DMAA
        oGL0Mumn3QYfU4e+1adMxgHgAABMDAAYABwYvVTGabfFt9ShT/XeLFMBUAcAEyMABgB1NFW7TT6lDn3p
        0jdkKgAMAEyGAA4DoAgAUwBwFwAKAdAHAJ0A0AkAfQBQyObfRVMAUMTmH84QQKrrPUegDn2IzR9HdRkA
        2AuAOQAYD4AO2p/xTbH5HWg8mz+H9mYAoO76Jf7+OFCHUXfJFunH5h8gkwaAgwCYBoAcbe10AkAOAKYB
        4GAaAAwADoxZ4ucdQ3UYZRe/KV0BUBFsfkgARwEwCwDdtHWzEQC6AWAWm380JAADgIoxi/37FVEdRlWv
        rdIGACUASG1+CACVlK+t2RKx+flUGRKAAUDJDYv9erBIHUYVACYDwIQEUMrmd9fWa8kA0J3NLw0JwABg
        srZeVKnDKOq5VboAoCokgHkAaKet5yI2vx3NCwmgirx57kAdRhEAZgDAhAAwT1snigAwLwSAoBnaOlGk
        Dl130VuSC4DaEABKARDZd37zANAOAKUhANSOLfLjqWR16DoAzAGAsQRQCQDnP/NPFAC6A6DSEoABwBxt
        HdepQ5dd+LbkAaDOEsBRADi7tx82AOQD4KglgDqK/JVF6tBlAJgBAGMJYJa2hk8BYJYlgKDI7wuoQ5cB
        YLslgIMAaLEHebIVALoB4KAlgO3aGi5Th67qsU3yAGAsAUzT1vAxAEyzBGBuXBTtjwF16CoAPGwJYC8A
        crQ1fAwAOWz+XksAD2truEodugoAGywB/EO73ufY/DmWADZo17tKHbrognckFwBiCWC8tobPsfnjLQEI
        RfaYgDp0EQAmAMBYADgMgNDP50cdm9+BDlsACJqgreEidegiAEyyBFCkXR+HAFBkCWCSdr2L1KGLAPCo
        JYAp2vVxCABTLAE8ql3vInXoIgDMtwRwl3Z9HALAXZYA5mvXu0gduggAqy0BFGrXxyEAFFoCWK1d7yJ1
        6CIAlFsC6KNdH4cA0McSQLl2vYvUoYsAUGMJoJN2fRwCQCdLADXa9S5Shy4CQLUlgNg8Atg8AORYAqjW
        rneROnQRAN6wBNBbuz4OAaC3JYA3tOtdpA5dBIAiSwAF2vVxCAAFlgAie6xDHboIADMtAdyhXR+HAHCH
        JYCZ2vUuUocuAsBkSwBevYw6TACYbAkgstuoDl0EgNssASzVro9DAFhqCeA27XoXqUMXAWCwJYDaPmXS
        UVvD59j8jlRrCWCwtoaL1KGLANDdEkBcnw6+mWyeDg6K7FXO6tBVAHjfEsBs7XqfY/NnWwJ4X7veVerQ
        VQD4vSWA6r5lco62ho+NXibnsPnVlgB+p63hKnXoKgD0BIBYAAheFDpdW8PHADA92HwLAMGrgS7S1nCV
        OnQZAF6yBHAoRi8LP2QJILJnARtShy4DwL2WAII3hkT2gIltAJgJgNTmWwC4R1vDZerQZQDoBIBDlgCO
        XLZJrtPW8aHC5TIcAEcsARykyJ/oUoeuA8A8SwDBm0N3570u52vrRNmxN4fuAoDtm0Pnauu4Th26DgDD
        ACCWAIK3h7+at1HO1NaKolHF0gYAa0O8PVwAMEhby3XqMIoA8EQIAMEBEXMv3yhnaGu5rKBYTgfAkyEP
        iHhcWyuK1GEUASAHAB+EABAcEfNcv9ekvbaei44dEfNMyCNiKsibh7bVYVQBYBQAJASA4JCo9VdscH/8
        2sgV0pXNX0dhDokSNt+rF7mqwygDwMyQAIJj4t4lZz9T2fxB9G6w+SEBPKGtF2XqMMoA0BEA74cEECRX
        lsrcq0pb7omVESul+8iVMpfNFwp7UORHAPDuBa7qMOoAMJLNrwsJoOGo2Jr+r8rU/uuls7Z2Ol23SjqP
        WCVTAVCT5lGxAoAx2tpRpw59iM2/k46kAaDhsOjaq9fLggGvyA8HrAv/K+PwF6TtscOin6HaDA6LPgqA
        e7U/w4fUoS8BYDwAPk8TQNPj4vdfs04WXLtW/py/Vu7Of1mGDFwj5w5aI+0GvSTtBpfIuUNKZPDQ1fJj
        +tOwF+UZNn8fZXpc/P8AcKt223xJHfoUAK4HwMEMAUTxgRGH6SbtNvmUOvQtAAwFwP4YAQg+Mmakdlt8
        Sx36GAD6A2BPDADsA4C3Zxk2Tx36Fv8CtAXArQDYGAMAZQC4lX8BYvEZgurQl7gTeAX3Af4KgOCUsLjd
        B/iUZnAn8BLttvmSOoyyi9+UMy7ZInew+a9ROo8D+AIgFQCEXwNfGLNEbh+zWNpqtznK1GEU9dwqrXtt
        lbsBUJ7GQ8E+A2j6UPCeGxbLLdrtjyp16LIL35a2F70l9wOgIuTTwXEE0PB0sDfnHqlDV/XYJmMB8G6I
        1wSeLAC+GFvkx8kn6rClyy2XCy54RxaEeGdQSwA4CoCjAKgDwBHHAIKXhHnxMnd12FKdv13anF8uDwHg
        IABMCwL4AgAfAOBlAPwLAI8A4EEA/AgA+QDoDoDjXk0EgLPY/J6UD4Ab2fw76Vds/tO0DQBHswxgYdM/
        P6rUYUv0nXelNwA2A8AAwLQAgC0AmA6AEQBorX0NmQSA9gDIB8D9bP7TtD9DAF683U0dZrvu78kEABwA
        gMkigBoABC8J+xmb7/ysXQC0ZvNH0l8AsC0NAJEdD9s0dZitzquQM7u9L08AwADAZAFADQAeB8BoAHj1
        OzUALgfA3wBQbQFgLQCy/q9UOqnDbPTtCukJgE0AMFkAUAWAaQDw/g2iAOgIgPvY/Ne/BsBG8uITw4LU
        YaZ96wPpA4BKAJgMAewGwEMAiOVZgQAYAIBfA2ARAJ4EwN1sfuQvZW+aOsykrh9KHgB2AcBkAOAjNv8B
        8uazAU/W1GG6nfuRXAmAPQAwaQLYC4CfAiAWz6SdDKnDdDrnYxkAgH0AMGkCKAaAdx8IebKnDsPW5RMZ
        CID9ADBpAKgFwC8AcLq2dlLLpg7DdPYnMhQAnwHApAGgDACRf3rmqZw6tK3zDhkBgBoAmJAA6gAwHQDe
        PT9+qqUObTqrUgYD4BAATEgAlQAYoa2Z1NhN/5EedDtN/N5zMpxa5O3w6vBEddopZwPgQwCYkAA+BsDF
        2ppJ9X33eWnPpj9GdWSC2PygchqqXZNJ6vBEAeDfADAhAXwIgJ7aekmNAeCpho1vBiDoc8rqfSZ1+E3l
        7JL7AWBCAqgAwIXaekmNsfmFdNzmNwMQtEa7Nt3U4dfVcbfkAeBQSADvAeACbb2k42PzH7EAUEc52vXp
        pA61OuyWdgDYAgATAsB2AHh3oJOvsfnFFgCChmjXp5M61ALA3wFgQgB4BwDJI3shYvNLLAFk7VNU1GHz
        2n8qNwPAhABQBYAe2lpJX5+XANrvkVwA7AsJ4GZtraRvzlcAywFgQgDw/jhXX/MOQLv/yjAAmBAANgPA
        mwMc45aPAFaEAHAQAH21dZLs8grAmXtlCABMCAA/0dZJss83AMtDAIjs489PprwB0HafDAaAsQSwAwCx
        /YBnn/IJwNIQAB7Q1kgKnxcA2uyTgQAwlgB2ACC515+lfAGwJASA5Ls/i0UOoHWV5APAWALYAYDkuz+L
        +QBgbggAyXd/swqXS2HhMnlk9DIpHr1USoKuD1oiJWOCFkvJDccaW1TfjYuOVb/5+y0BbP7+c1KSamFj
        45r2bH0/OL75NHH8AunS8DV/+cW32i+tALDXEsAOACTf/ccaVSztRy2Xp0K+OzgVm18fGx9sviUAw+bX
        t7AxNr6xZ+tjw78SAHZS6vDqL28EAIYBwFgCSL77mwSAx9J4e3iUAIKqKffLGwGA6ZYAdgIg+e4/VkGx
        9ABAXQwBBM3+8oYA4C1LAMmzfU0CwO1pnhDiA4BtqRtxRrX0AoCxBDC2+V/CqRwAJsYYwP7UjQDAg5YA
        agCQ/PPfJAAMjzGAVakbAYCVlgC8ONnKpwBwJgDKYwrgntNO/0zOAsD/LAF4+9EnUQaAoQD4PGYAFgVf
        ewDgFgAYCwACgPOa3/ik+gCQB4A1AKjzHEAVmz+FWgVfdwDgn5YASpvf6KSvBoAcAAxh8wuCAFAAgAIA
        FACggM1PxeanYvPre14K2PzNlgB+yeYXpFrYGBvf2LP1seFNu7T51xsAeNkSwG+bX5yU3dh8988FAGC7
        JYBrtAWSsldUAA5YAuilLZCUvaIC8JklgN7aAknZKyoAZZYA7tMWSMpeUQFYaAmggl8Dk/P7WrCoAPzB
        EkDwQNBTObuSg51aqqgA9AsBIHgy6LVOO2XSWZVyZecdydl+2SwSAMF/ALA5BICmLwpt+s6g5ucDaIdE
        fdNJoTbHxWfzI2PS/cwgGblCttHsguLsnvodJQDbZwMTAMd/ZEw1pV5alY2iBNAaAGUJgNAAgnaOKm58
        kWUmRQYgCAADAHAkAZDWp4ZNbPqXmm6RAggCwJQEQFoAsvLm2MgBBAHgNwmAyADMtwTwlWf10k0dAmAK
        AOoSANYAsvUjYKIFgCrt2nRTh0EAGAiATQmAEwLI5p3ALrTzBACy+rnD6rAhALQCwM8BsCUBoALI6q+B
        QQAYw6ZXfw2ARZR6JU+2UodaALgcAH8EQBEAygCw9xQF0GIPBDXEpufSbNpG+9n0VXSP9v9mljnt/w+p
        BeVXCICYAAAAAElFTkSuQmCC
</value>
  </data>
</root>